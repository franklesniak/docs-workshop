{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>My name is Josh Hendricks and the contents of this site are intended for use during my \"Build Beautiful Documentation with platyPS and Material for MkDocs\" workshop on Monday, April 8th 2024 at the PowerShell + DevOps Summit in Bellevue, WA.</p>"},{"location":"#synopsis","title":"Synopsis","text":"<p>It has never been easier to build and publish documentation that is as functional as it is beautiful. Bring your laptop, and together we\u2019ll take a bare-bones, boring PowerShell project and generate visually appealing, responsive, searchable, online documentation.</p>"},{"location":"commands/en-US/Find-DadJoke/","title":"Find-DadJoke","text":""},{"location":"commands/en-US/Find-DadJoke/#synopsis","title":"SYNOPSIS","text":"<p>Finds a matching dad joke from icanhazdadjoke.com.</p>"},{"location":"commands/en-US/Find-DadJoke/#syntax","title":"SYNTAX","text":"<pre><code>Find-DadJoke [[-Term] &lt;String&gt;] [-ProgressAction &lt;ActionPreference&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/en-US/Find-DadJoke/#description","title":"DESCRIPTION","text":"<p>The <code>Find-DadJoke</code> cmdlet finds a dad joke from icanhazdadjoke.com which matches the provided term(s), or if no terms are provided, all jokes are returned.</p>"},{"location":"commands/en-US/Find-DadJoke/#examples","title":"EXAMPLES","text":""},{"location":"commands/en-US/Find-DadJoke/#example-1","title":"Example 1","text":"<pre><code>Find-DadJoke\n</code></pre> <p>Gets all dad jokes the api has to offer.</p>"},{"location":"commands/en-US/Find-DadJoke/#example-1_1","title":"Example 1","text":"<pre><code>Find-DadJoke -Term cat\n</code></pre> <p>Finds dad jokes about cats \ud83e\udd37\u200d\u2642\ufe0f</p>"},{"location":"commands/en-US/Find-DadJoke/#parameters","title":"PARAMETERS","text":""},{"location":"commands/en-US/Find-DadJoke/#-term","title":"-Term","text":"<p>A word, or words, to search for in the catalog of dad jokes.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases:\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Find-DadJoke/#-progressaction","title":"-ProgressAction","text":"<p>This common parameter is new in PowerShell 7.4, and PlatyPS v0.14.2 thinks it's one of your function's parameters. Remind me to show you how you can work around this until v2 is released.</p> <pre><code>Type: ActionPreference\nParameter Sets: (All)\nAliases: proga\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Find-DadJoke/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/en-US/Find-DadJoke/#inputs","title":"INPUTS","text":""},{"location":"commands/en-US/Find-DadJoke/#none","title":"None","text":""},{"location":"commands/en-US/Find-DadJoke/#outputs","title":"OUTPUTS","text":""},{"location":"commands/en-US/Find-DadJoke/#systemstring","title":"System.String","text":""},{"location":"commands/en-US/Find-DadJoke/#notes","title":"NOTES","text":""},{"location":"commands/en-US/Find-DadJoke/#related-links","title":"RELATED LINKS","text":""},{"location":"commands/en-US/Get-DadJoke/","title":"Get-DadJoke","text":""},{"location":"commands/en-US/Get-DadJoke/#synopsis","title":"SYNOPSIS","text":"<p>Get a random dad joke, or a specific joke by Id from icanhazdadjoke.com.</p>"},{"location":"commands/en-US/Get-DadJoke/#syntax","title":"SYNTAX","text":"<pre><code>Get-DadJoke [[-JokeId] &lt;String&gt;] [-ProgressAction &lt;ActionPreference&gt;] [&lt;CommonParameters&gt;]\n</code></pre>"},{"location":"commands/en-US/Get-DadJoke/#description","title":"DESCRIPTION","text":"<p>The <code>Get-DadJoke</code> cmdlet gets a random dad joke from icanhazdadjoke.com, but it won't help you \"get\" the joke.</p> <p>...</p> <p>Get it?</p> <p>\ud83e\udd97\ud83e\udd97</p> <p>\ud83d\ude05 Yeah, Steven Judd is much better at this.</p>"},{"location":"commands/en-US/Get-DadJoke/#examples","title":"EXAMPLES","text":""},{"location":"commands/en-US/Get-DadJoke/#example-1","title":"Example 1","text":"<pre><code>Get-DadJoke\n</code></pre> <p>Gets a random dad joke.</p>"},{"location":"commands/en-US/Get-DadJoke/#example-2","title":"Example 2","text":"<pre><code>Get-DadJoke -Id DtWSnydN7h\n</code></pre> <p>Gets a joke about \"shells\".</p>"},{"location":"commands/en-US/Get-DadJoke/#parameters","title":"PARAMETERS","text":""},{"location":"commands/en-US/Get-DadJoke/#-jokeid","title":"-JokeId","text":"<p>The Id of a specific dad joke to get.</p> <pre><code>Type: String\nParameter Sets: (All)\nAliases: Id\n\nRequired: False\nPosition: 0\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Get-DadJoke/#-progressaction","title":"-ProgressAction","text":"<p>This common parameter is new in PowerShell 7.4, and PlatyPS v0.14.2 thinks it's one of your function's parameters. Remind me to show you how you can work around this until v2 is released.</p> <pre><code>Type: ActionPreference\nParameter Sets: (All)\nAliases: proga\n\nRequired: False\nPosition: Named\nDefault value: None\nAccept pipeline input: False\nAccept wildcard characters: False\n</code></pre>"},{"location":"commands/en-US/Get-DadJoke/#commonparameters","title":"CommonParameters","text":"<p>This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.</p>"},{"location":"commands/en-US/Get-DadJoke/#inputs","title":"INPUTS","text":""},{"location":"commands/en-US/Get-DadJoke/#none","title":"None","text":""},{"location":"commands/en-US/Get-DadJoke/#outputs","title":"OUTPUTS","text":""},{"location":"commands/en-US/Get-DadJoke/#systemstring","title":"System.String","text":""},{"location":"commands/en-US/Get-DadJoke/#notes","title":"NOTES","text":""},{"location":"commands/en-US/Get-DadJoke/#related-links","title":"RELATED LINKS","text":""},{"location":"examples/","title":"Example Modules","text":"<p>Here are a handful of PowerShell modules with online documentation generated using MkDocs. Check out their GitHub repos to see their <code>mkdocs.yml</code> configuration and how they structure their markdown files.</p>"},{"location":"examples/#posh-acme","title":"Posh-ACME","text":"<ul> <li> Source on GitHub</li> <li> Website</li> </ul>"},{"location":"examples/#psappdeploytoolkit","title":"PSAppDeployToolkit","text":"<ul> <li> Source on GitHub</li> <li> Website</li> </ul>"},{"location":"examples/#pshtml","title":"PSHTML","text":"<ul> <li> Source on GitHub</li> <li> Website</li> </ul>"},{"location":"examples/#psrule","title":"PSRule","text":"<ul> <li> Source on GitHub</li> <li> Website</li> </ul>"},{"location":"examples/#powervcf","title":"PowerVCF","text":"<ul> <li> Source on GitHub</li> <li> Website</li> </ul>"},{"location":"mkdocs/01-intro/","title":"Introduction","text":"<p>MkDocs is a python-based static site generator that takes source files in markdown and builds beautiful, responsive, searchable websites that can be hosted anywhere.</p> <p>Follow along to familiarize yourself with the command-line interface and create a simple website from scratch with a couple commands and a little markdown.</p>"},{"location":"mkdocs/01-intro/#show-help","title":"Show Help","text":"<p>Run <code>mkdocs -h</code> to make sure mkdocs is installed and to see the CLI help:</p> Command<pre><code>mkdocs -h\n</code></pre> <pre><code>Usage: mkdocs [OPTIONS] COMMAND [ARGS]...\n\n  MkDocs - Project documentation with Markdown.\n\nOptions:\n  -V, --version         Show the version and exit.\n  -q, --quiet           Silence warnings\n  -v, --verbose         Enable verbose output\n  --color / --no-color  Force enable or disable color and wrapping for the output. Default is\n                        auto-detect.\n  -h, --help            Show this message and exit.\n\nCommands:\n  build      Build the MkDocs documentation\n  get-deps   Show required PyPI packages inferred from plugins in mkdocs.yml\n  gh-deploy  Deploy your documentation to GitHub Pages\n  new        Create a new MkDocs project\n  serve      Run the builtin development server\n</code></pre>"},{"location":"mkdocs/01-intro/#steps","title":"Steps","text":""},{"location":"mkdocs/01-intro/#step-1-help","title":"Step 1: Help","text":"<p>Run <code>mkdocs -h</code> to make sure mkdocs is installed and to see the CLI help. It should look like...</p> <pre><code>Usage: mkdocs [OPTIONS] COMMAND [ARGS]...\n\n  MkDocs - Project documentation with Markdown.\n\nOptions:\n  -V, --version         Show the version and exit.\n  -q, --quiet           Silence warnings\n  -v, --verbose         Enable verbose output\n  --color / --no-color  Force enable or disable color and wrapping for the output. Default is\n                        auto-detect.\n  -h, --help            Show this message and exit.\n\nCommands:\n  build      Build the MkDocs documentation\n  get-deps   Show required PyPI packages inferred from plugins in mkdocs.yml\n  gh-deploy  Deploy your documentation to GitHub Pages\n  new        Create a new MkDocs project\n  serve      Run the builtin development server\n</code></pre>"},{"location":"mkdocs/01-intro/#step-2-new-project","title":"Step 2: New project","text":"<p>Create a new MkDocs project in the sandbox folder. The <code>.gitignore</code> file ensures any new files in this folder are ignored by <code>git</code>.</p> Command<pre><code>mkdocs new ./sandbox/\n</code></pre> <p>Your <code>sandbox</code> directory now has an <code>mkdocs.yml</code> file, and a <code>docs/</code> folder with a single <code>index.md</code> file.</p> <p></p> mkdocs.yml<pre><code>site_name: My Docs\n</code></pre> docs/index.md<pre><code># Welcome to MkDocs\n\nFor full documentation visit [mkdocs.org](https://www.mkdocs.org).\n\n## Commands\n\n* `mkdocs new [dir-name]` - Create a new project.\n* `mkdocs serve` - Start the live-reloading docs server.\n* `mkdocs build` - Build the documentation site.\n* `mkdocs -h` - Print help message and exit.\n\n## Project layout\n\n    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"mkdocs/01-intro/#step-3-serve","title":"Step 3: Serve","text":"<p>Let's see what our new MkDocs project looks like as a website! Run the <code>mkdocs serve</code> command below, then open a browser to http://localhost:8000/ or whatever URL is provided to you if you're running this in a GitHub codespace.</p> Command<pre><code>mkdocs serve -f sandbox/mkdocs.yml # (1)!\n</code></pre> <ol> <li>mkdocs binds to 127.0.0.1:8000 by default. In some cases you may need to bind on all interfaces, or a different port. Use <code>--dev-addr 0.0.0.0:8001</code> to listen for connections on TCP port 8001 on all interfaces for example.</li> </ol> Output<pre><code>PS /workspaces/docs-workshop&gt; mkdocs serve -f ./sandbox/mkdocs.yml\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\nINFO    -  Documentation built in 0.28 seconds\nINFO    -  [19:58:02] Watching paths for changes: 'sandbox/docs', 'sandbox/mkdocs.yml'\nINFO    -  [19:58:02] Serving on http://127.0.0.1:8000/\nINFO    -  [19:58:25] Browser connected: http://localhost:8000/\nINFO    -  [19:58:28] Browser connected: http://localhost:8000/\nINFO    -  [20:06:41] Browser connected: http://localhost:8000/\n</code></pre>"},{"location":"mkdocs/01-intro/#step-4-update-content","title":"Step 4: Update content","text":""},{"location":"mkdocs/01-intro/#step-5-experiment","title":"Step 5: Experiment","text":"<p>There are a bunch of themes for MkDocs. Check out this catalog of themes as well as a variety of extensions.</p> Command<pre><code>pip install --force-reinstall mkdocs mkdocs-terminal mkdocs-dracula-theme mkdocs-simple-blog\n</code></pre> mkdocs.yml<pre><code>theme:\n  name: mkdocs # Options: mkdocs | readthedocs | material | terminal | dracula | simple-blog\n</code></pre>"},{"location":"mkdocs/01-intro/#reset","title":"Reset","text":"<pre><code>Remove-Item ./sandbox/docs/, ./sandbox/mkdocs.yml -Recurse\n</code></pre>"},{"location":"mkdocs/02-help/","title":"Show Help","text":"<p>Run <code>mkdocs -h</code> to make sure mkdocs is installed and to see the CLI help. It should look like...</p> <pre><code>Usage: mkdocs [OPTIONS] COMMAND [ARGS]...\n\n  MkDocs - Project documentation with Markdown.\n\nOptions:\n  -V, --version         Show the version and exit.\n  -q, --quiet           Silence warnings\n  -v, --verbose         Enable verbose output\n  --color / --no-color  Force enable or disable color and wrapping for the output. Default is\n                        auto-detect.\n  -h, --help            Show this message and exit.\n\nCommands:\n  build      Build the MkDocs documentation\n  get-deps   Show required PyPI packages inferred from plugins in mkdocs.yml\n  gh-deploy  Deploy your documentation to GitHub Pages\n  new        Create a new MkDocs project\n  serve      Run the builtin development server\n</code></pre>"},{"location":"mkdocs/03-new/","title":"Create new project","text":""},{"location":"mkdocs/03-new/#mkdocs-new","title":"mkdocs new","text":"<p>Create a new MkDocs project in the sandbox folder with the <code>mkdocs new</code> command:</p> Command<pre><code>mkdocs new ./sandbox/\n</code></pre> <pre><code>INFO    -  Writing config file: ./sandbox/mkdocs.yml\nINFO    -  Writing initial docs: ./sandbox/docs/index.md\n</code></pre> <p>Your <code>sandbox</code> directory should now have an <code>mkdocs.yml</code> file, and a <code>docs/</code> folder with a single <code>index.md</code> file:</p> mkdocs.yml<pre><code>site_name: My Docs\n</code></pre> docs/index.md<pre><code># Welcome to MkDocs\n\nFor full documentation visit [mkdocs.org](https://www.mkdocs.org).\n\n## Commands\n\n* `mkdocs new [dir-name]` - Create a new project.\n* `mkdocs serve` - Start the live-reloading docs server.\n* `mkdocs build` - Build the documentation site.\n* `mkdocs -h` - Print help message and exit.\n\n## Project layout\n\n    mkdocs.yml    # The configuration file.\n    docs/\n        index.md  # The documentation homepage.\n        ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"mkdocs/03-new/#mkdocs-serve","title":"mkdocs serve","text":"<p>Run the <code>mkdocs serve</code> command below, then open a browser to http://localhost:8000/ or whatever URL is provided to you if you're running this in a GitHub codespace. You should see a page like the one in the screenshot at the top of this section. You can even edit your markdown files and see the page refresh in realtime!</p> Specify interface and port <p>In some cases you might need to specify an IP and/or port to bind to, or you may want to bind to all interfaces instead of the default of port 8000 on localhost. Add include the argument <code>--dev-addr 0.0.0.0:8080</code> to bind to all interfaces on port 8080 for example.</p> Command<pre><code>mkdocs serve -f ./sandbox/mkdocs.yml\n</code></pre> Output<pre><code>INFO    -  Building documentation...\nINFO    -  Cleaning site directory\nINFO    -  Documentation built in 0.28 seconds\nINFO    -  [19:58:02] Watching paths for changes: 'sandbox/docs', 'sandbox/mkdocs.yml'\nINFO    -  [19:58:02] Serving on http://127.0.0.1:8000/\nINFO    -  [19:58:25] Browser connected: http://localhost:8000/\nINFO    -  [19:58:28] Browser connected: http://localhost:8000/\nINFO    -  [20:06:41] Browser connected: http://localhost:8000/\n</code></pre>"},{"location":"mkdocs/04-add-content/","title":"Add content","text":"<p>With a new MkDocs project bootstrapped and being served with <code>mkdocs serve</code>, you can now modify existing markdown files in your <code>./docs/</code> directory, or add new ones, and the site served by the <code>mkdocs</code> command-line tool will update when the contents of the <code>mkdocs.yml</code> file or <code>./docs/</code> directory are modified.</p> <p>Example</p> <p>Copy and paste the PowerShell code below to generate a few pages. Make sure you are in the root of the repository, and the pages will be created in <code>./sandbox/docs/</code> automatically.</p> Command<pre><code>'about', 'contact' | ForEach-Object {\n    \"# $($_[0].ToString().ToUpper() + $_.Substring(1))\" | Set-Content -Path (New-Item \"./sandbox/docs/$_.md\" -Force)\n}\n\n1..5 | ForEach-Object {\n   \"# Step $_`n`n\" | Set-Content -Path (New-Item \"./sandbox/docs/getting-started/step-0$_.md\" -Force)\n}\n</code></pre>"},{"location":"mkdocs/05-themes/","title":"Themes","text":"<p>There are a bunch of themes for MkDocs - many of them are listed in this catalog. Run the following command to install a few to experiment with:</p> Command<pre><code>PS /&gt; pip install mkdocs-terminal mkdocs-dracula-theme mkdocs-simple-blog\n</code></pre> <p>Now you can specify what theme to use when rendering your site by editing <code>mkdocs.yml</code>:</p> sandbox/mkdocs.yml<pre><code>site_name: My Docs\ntheme:\n  name: dracula # Options: mkdocs | readthedocs | material | terminal | dracula | simple-blog\n</code></pre> <p></p>"},{"location":"mkdocs-material/03-mkdocs-material/","title":"Material for MkDocs","text":""},{"location":"mkdocs-material/03-mkdocs-material/#getting-started","title":"Getting Started","text":""},{"location":"mkdocs-material/03-mkdocs-material/#command-documentation","title":"Command Documentation","text":""},{"location":"mkdocs-material/03-mkdocs-material/#tutorials","title":"Tutorials","text":""},{"location":"mkdocs-material/03-mkdocs-material/#blogging","title":"Blogging","text":""},{"location":"platyps/01-intro/","title":"Introduction","text":"<p>The PlatyPS module will look at the output of <code>Get-Help -Module &lt;your-module&gt;</code> and then generate markdown files representing the existing documentation available in the module. If the commands are missing some, or all documentation, you'll find placeholders like <code>{{ Fill in the Description }}</code>.</p>"},{"location":"platyps/01-intro/#icanhazdadjoke","title":"ICanHazDadJoke?","text":"<p>I didn't have to think about what kind of sample module to use for this workshop for long before landing on dad jokes. You can run PlatyPS against any PowerShell module for practice, but to keep things easy, copy and paste the following commands into PowerShell while at the root of this repository:</p> <pre><code>$moduleParams = @{\n    Path              = New-Item ./sandbox/dadjokes/dadjokes.psd1 -Force\n    RootModule        = 'dadjokes.psm1'\n    Description       = 'Get dad jokes from the icanhazdadjoke.com API.'\n    FunctionsToExport = 'Get-DadJoke', 'Find-DadJoke'\n}\n\nNew-ModuleManifest @moduleParams\n\n@'\nclass DadJoke {\n    [string]$Id\n    [string]$Joke\n}\n\nfunction Get-DadJoke {\n    &lt;#\n    .SYNOPSIS\n    Gets a dad joke from the icanhazdadjoke.com API.\n\n    .DESCRIPTION\n    Gets a dad joke from the icanhazdadjoke.com API.\n\n    .PARAMETER JokeId\n    Specifies an optional joke Id.\n\n    .EXAMPLE\n    Get-DadJoke\n\n    Gets a dad joke, but can't help you \"get\" the dad joke.\n\n    .NOTES\n\n    .LINK\n    https://icanhazdadjoke.com/api\n    #&gt;\n    [CmdletBinding()]\n    [Alias('Invoke-StevenJudd')]\n    [OutputType([DadJoke])]\n    param (\n        [Parameter()]\n        [Alias('Id')]\n        [string]\n        $JokeId\n    )\n\n    process {\n        $irmParams = @{\n            Uri         = $script:api.BaseUri\n            Headers     = @{\n                'Accept'     = $script:api.Format['json']\n                'User-Agent' = $script:api.UserAgent\n            }\n            ErrorAction = 'Stop'\n        }\n        try {\n            while ([datetime]::Now -lt $script:api.WaitUntil) {\n                Write-Verbose 'Waiting a bit between requests. Be kind to free APIs &lt;3'\n                Start-Sleep -Milliseconds 500\n            }\n            [DadJoke](Invoke-RestMethod @irmParams | Select-Object Id, Joke)\n            $script:api.WaitUntil = [datetime]::Now.Add($script:api.Interval)\n        } catch {\n            throw\n        }\n    }\n}\n\nfunction Find-DadJoke {\n    [CmdletBinding()]\n    [OutputType([DadJoke])]\n    param (\n        [Parameter()]\n        [string]\n        $Term = ''\n    )\n\n    process {\n        $query = @{\n            page  = 1\n            limit = 20 # Max: 30\n        }\n        if (![string]::IsNullOrWhiteSpace($Term)) {\n            $query.term = $Term\n        }\n        $irmParams = @{\n            Headers     = @{\n                'Accept'     = $script:api.Format['json']\n                'User-Agent' = $script:api.UserAgent\n            }\n            ErrorAction = 'Stop'\n        }\n        do {\n            try {\n                $irmParams.Uri = buildUri -BaseUri $script:api.BaseUri -Path 'search' -Query $query\n                while ([datetime]::Now -lt $script:api.WaitUntil) {\n                    Write-Verbose 'Waiting a bit between requests. Be kind to free APIs &lt;3'\n                    Start-Sleep -Milliseconds 500\n                }\n                $page = Invoke-RestMethod @irmParams\n                $script:api.WaitUntil = [datetime]::Now.Add($script:api.Interval)\n                Write-Verbose (\"current_page = {0}; next_page = {1}; total_pages = {2}; total_jokes = {3}\" -f $page.current_page, $page.next_page, $page.total_pages, $page.total_jokes)\n                if ($page.results.Count -gt 0) {\n                    [DadJoke[]]$page.results\n                }\n            } catch {\n                throw\n            }\n        } while ($page.next_page -eq (++$query.page))\n    }\n}\n\n$script:api = @{\n    BaseUri   = 'https://icanhazdadjoke.com/'\n    UserAgent = 'PSHSummit docs-workshop (https://github.com/joshooaj/)'\n    Format = @{\n        json = 'application/json'\n        text = 'text/plain'\n        html = 'text/html'\n    }\n    WaitUntil = [datetime]::MinValue\n    Interval  = [timespan]::FromSeconds(1)\n}\n\nExport-ModuleMember -Function Get-DadJoke, Find-DadJoke -Alias Invoke-StevenJudd\n'@ | Set-Content -Path ./sandbox/dadjokes/dadjokes.psm1\n\nImport-Module ./sandbox/dadjokes/ -PassThru\n</code></pre>"},{"location":"platyps/01-intro/#icanhazmarkdown","title":"ICanHazMarkdown?","text":"<p>You should now have a \"dadjokes\" folder under <code>./sandbox/</code> with a <code>dadjokes.psm1</code> and <code>dadjokes.psd1</code> file. Run the following command to generate some markdown help files for your module:</p> <pre><code>New-MarkdownHelp -Module dadjokes -OutputFolder ./sandbox/docs/commands -Force\n</code></pre>"},{"location":"platyps/02-existing-help/","title":"Get-Help","text":"<p>With the the <code>dadjokes</code> module imported, you can get help in the terminal with the <code>Get-Help</code> command. The help system is one of the many neat features of PowerShell. The format of help for every function or cmdlet has the same schema. And even if you don't document anything, you still get some basic information about the expected parameters, parameter types, and which parameters (if any) are required when using the command.</p> <p>In the sample <code>dadjoke</code> module, I intentionally added comment-based help for <code>Get-DadJoke</code> and not for <code>Find-DadJoke</code>. You can see in the <code>Find-DadJoke</code> tab below that the built-in help system still gives you a good idea of how to use the command, and thanks to the use of the <code>[OutputType()]</code> attribute, it even declares the output type for the command.</p> Command<pre><code>Get-Command -Module dadjokes | Get-Help -Full\n</code></pre> Get-DadJokeFind-DadJoke <pre><code>NAME\n    Get-DadJoke\n\nSYNOPSIS\n    Gets a dad joke from the icanhazdadjoke.com API.\n\n\nSYNTAX\n    Get-DadJoke [[-JokeId] &lt;String&gt;] [&lt;CommonParameters&gt;]\n\n\nDESCRIPTION\n    Gets a dad joke from the icanhazdadjoke.com API.\n\n\nPARAMETERS\n    -JokeId &lt;String&gt;\n        Specifies an optional joke Id.\n\n        Required?                    false\n        Position?                    1\n        Default value                \n        Accept pipeline input?       false\n        Accept wildcard characters?  false\n\n    &lt;CommonParameters&gt;\n        This cmdlet supports the common parameters: Verbose, Debug,\n        ErrorAction, ErrorVariable, WarningAction, WarningVariable,\n        OutBuffer, PipelineVariable, and OutVariable. For more information, see\n        about_CommonParameters (https://go.microsoft.com/fwlink/?LinkID=113216). \n\nINPUTS\n\nOUTPUTS\n    DadJoke\n\n\n    -------------------------- EXAMPLE 1 --------------------------\n\n    PS &gt; Get-DadJoke\n\n    Gets a dad joke, but can't help you \"get\" the dad joke.\n\n\n\n\n\nRELATED LINKS\n    https://icanhazdadjoke.com/api\n</code></pre> <pre><code>NAME\n    Find-DadJoke\n\nSYNTAX\n    Find-DadJoke [[-Term] &lt;string&gt;] [&lt;CommonParameters&gt;]\n\n\nPARAMETERS\n    -Term &lt;string&gt;\n\n        Required?                    false\n        Position?                    0\n        Accept pipeline input?       false\n        Parameter set name           (All)\n        Aliases                      None\n        Dynamic?                     false\n        Accept wildcard characters?  false\n\n    &lt;CommonParameters&gt;\n        This cmdlet supports the common parameters: Verbose, Debug,\n        ErrorAction, ErrorVariable, WarningAction, WarningVariable,\n        OutBuffer, PipelineVariable, and OutVariable. For more information, see\n        about_CommonParameters (https://go.microsoft.com/fwlink/?LinkID=113216). \n\n\nINPUTS\n    None\n\n\nOUTPUTS\n    DadJoke\n\n\nALIASES\n    None\n\n\nREMARKS\n    None\n</code></pre>"},{"location":"platyps/03-new-markdownhelp/","title":"New-MarkdownHelp","text":"<p>There are a lot of cases where comment-based help is more than enough. Internal tools, and side projects without any/many users besides yourself for example. Larger PowerShell modules where you expect to have many users, or even experimental projects for which you want to be recognized for your experience and attention to detail are great candidates for web-based documentation.</p> <p>The fastest way to get from comment-based help in the shell to web-based documentation is to let PlatyPS generate markdown-based versions of your existing help.</p>"},{"location":"platyps/03-new-markdownhelp/#icanhazmarkdown","title":"ICanHazMarkdown?","text":"<p>The following commands will import the dadjokes module (if it's not already imported) and then generate two markdown files - one for each function in the module.</p> Command<pre><code>Import-Module ./sandbox/dadjokes/ -PassThru # (1)!\nNew-MarkdownHelp -Module dadjokes -OutputFolder ./sandbox/docs/commands -Force # (2)!\n</code></pre> <ol> <li>A module needs to be imported for PlatyPS to \"see\" it. It will be auto-loaded    if necessary, but in this case our module isn't installed so we need to import    it ourselves.</li> <li>This will create a new *.md file for each command in the dadjokes module. Warning: The <code>Force</code> parameter will overwrite existing files, but there shouldn't be any here yet.  </li> </ol>"},{"location":"platyps/04-update-markdownhelp/","title":"Update-MarkdownHelp","text":"<p>As time passes and your module grows and changes, your docs need to stay in sync. When you add or remove parameters or change attributes, you want the documentation to reflect that. And I hate to break it to you, but if you're reading this (and your name isn't ChatGPT) then you're probably human, which means you can't be relied upon to keep the documentation up to date by hand.</p> <p>Fortuantely, <code>Update-MarkdownHelp</code> is there to update the \"machine readable\" parts of your markdown help files like parameters, parameter sets, and attributes. And any new parameters lacking a description will have a <code>{{ Fill in the Description }}</code> placeholder you can search for as a part of your automation to ensure you don't publish incomplete help by mistake.</p>"},{"location":"platyps/04-update-markdownhelp/#demonstration","title":"Demonstration","text":"<p>To see how PlatyPS treats existing help files, start by adding the highlighted parameter to <code>Get-DadJoke</code> in <code>sandbox/dadjokes/dadjokes.psm1</code> after the <code>$JokeId</code> parameter on line 34.</p> sandbox/dadjokes/dadjokes.psm1<pre><code>   param (\n        [Parameter()]\n        [Alias('Id')]\n        [string]\n        $JokeId,\n\n        [Parameter()]\n        [string]\n        $PlatyPSTest\n    )\n</code></pre> Command<pre><code>Import-Module ./sandbox/dadjokes/ -Force -PassThru # (1)!\nNew-MarkdownHelp -Module dadjokes -OutputFolder ./sandbox/docs/commands -Force # (2)!\n</code></pre> <ol> <li>A module needs to be imported for PlatyPS to \"see\" it. And if it was already    imported before making changes to it, we need to use <code>-Force</code> to tell PowerShell    to re-import it.</li> <li>This will create a new *.md file for each command in the dadjokes module. Warning: The <code>Force</code> parameter will overwrite existing files, but there shouldn't be any here yet.  </li> </ol>"}]}